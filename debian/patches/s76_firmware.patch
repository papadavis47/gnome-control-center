--- gnome-control-center-3.30.2.orig/meson.build
+++ gnome-control-center-3.30.2/meson.build
@@ -125,7 +125,8 @@ common_deps = [
   gsettings_desktop_dep,
   dependency('gio-unix-2.0'),
   dependency('gthread-2.0'),
-  dependency('gtk+-3.0', version: '>= 3.22.20')
+  dependency('gtk+-3.0', version: '>= 3.22.20'),
+  dependency ('json-glib-1.0')
 ]

 # Check for CUPS 1.4 or newer
@@ -162,6 +163,10 @@ endif
 config_h.set('HAVE_CHEESE', enable_cheese,
              description: 'Define to 1 to enable cheese webcam support')

+# Testing
+config_h.set('TEST_MODE', get_option('testing'),
+             description: 'Enable test code paths')
+
 # IBus support
 enable_ibus = get_option('ibus')
 if enable_ibus
@@ -282,4 +287,4 @@ output += '     NetworkManager (Network
 output += '     Wacom (Wacom tablet panel) ................. ' + host_is_linux_not_s390.to_string() + '\n'
 output += '     Wayland .................................... ' + enable_wayland.to_string() + '\n'

-message(output)
\ No newline at end of file
+message(output)
--- gnome-control-center-3.30.2.orig/meson_options.txt
+++ gnome-control-center-3.30.2/meson_options.txt
@@ -3,4 +3,5 @@ option('documentation', type: 'boolean',
 option('gnome_session_libexecdir', type: 'string', value: '', description: 'Directory for gnome-session\'s libexecdir')
 option('ibus', type: 'boolean', value: true, description: 'build with IBus support')
 option('tracing', type: 'boolean', value: false, description: 'add extra debugging information')
-option('wayland', type: 'boolean', value: true, description: 'build with Wayland support')
\ No newline at end of file
+option('wayland', type: 'boolean', value: true, description: 'build with Wayland support')
+option('testing', type: 'boolean', value: false, description: 'build for testing')
--- gnome-control-center-3.30.2.orig/panels/info/cc-info-overview-panel.c
+++ gnome-control-center-3.30.2/panels/info/cc-info-overview-panel.c
@@ -25,6 +25,7 @@

 #include "cc-info-resources.h"
 #include "info-cleanup.h"
+#include "list-box-helper.h"

 #include <glib.h>
 #include <glib/gi18n.h>
@@ -46,10 +47,10 @@
 #include <gdk/gdkx.h>
 #endif

-#include "gsd-disk-space-helper.h"
-
 #include "cc-info-overview-panel.h"
-
+#include "dmi-info.h"
+#include "gsd-disk-space-helper.h"
+#include "s76-firmware.h"

 typedef struct {
   /* Will be one or 2 GPU name strings, or "Unknown" */
@@ -70,6 +71,17 @@ typedef struct
   GtkWidget      *virt_type_label;
   GtkWidget      *updates_button;

+  /* Pop fields */
+  GtkWidget      *computer_label;
+  GtkWidget      *model_label;
+  GtkWidget      *firmware_upgrade_label;
+  GtkWidget      *firmware_button;
+
+  S76FirmwareDaemon  *firmware_daemon;
+  S76FirmwareVersion *firmware_version;
+  gchar              *firmware_digest;
+  gchar              *firmware_changelog;
+
   /* Virtualisation labels */
   GtkWidget      *label8;
   GtkWidget      *grid1;
@@ -837,6 +849,8 @@ cc_info_overview_panel_dispose (GObject
   CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (CC_INFO_OVERVIEW_PANEL (object));

   g_clear_pointer (&priv->graphics_data, graphics_data_free);
+  g_clear_pointer (&priv->firmware_version, s76_firmware_version_free);
+  g_slice_free (S76FirmwareDaemon, priv->firmware_daemon);

   G_OBJECT_CLASS (cc_info_overview_panel_parent_class)->dispose (object);
 }
@@ -863,6 +877,69 @@ cc_info_overview_panel_finalize (GObject
 }

 static void
+set_computer_label (GtkLabel *label)
+{
+  g_autofree char *product_name = get_product_name ();
+  g_autofree char *sys_vendor = get_sys_vendor ();
+  g_autofree char *computer_text = g_strconcat (sys_vendor, " ", product_name, NULL);
+
+  gtk_label_set_text (label, computer_text ? computer_text : "");
+}
+
+static void
+set_model_label (GtkLabel *label)
+{
+  g_autofree char *model_text = get_product_version ();
+  gtk_label_set_text (label, model_text ? model_text : "");
+}
+
+void s76_firmware_connect_schedule (GtkButton *button, FirmwareScheduleData *data)
+{
+  CcInfoOverviewPanelPrivate *priv = (CcInfoOverviewPanelPrivate*) data->data;
+  g_info ("scheduling upgrade of firmware to %s", priv->firmware_version->bios);
+
+  const gchar *scheduled_label = _("Firmware Upgrade Scheduled");
+
+#ifdef TEST_MODE
+  g_info ("faking firmware scheduling");
+  gtk_widget_hide (priv->firmware_button);
+  gtk_widget_set_halign (GTK_WIDGET (priv->firmware_upgrade_label), GTK_ALIGN_CENTER);
+  gtk_label_set_label (GTK_LABEL (priv->firmware_upgrade_label), scheduled_label);
+#else
+  if (!s76_firmware_daemon_schedule (priv->firmware_daemon, priv->firmware_digest)) {
+    gtk_widget_hide (priv->firmware_button);
+    gtk_widget_set_halign (GTK_WIDGET (priv->firmware_upgrade_label), GTK_ALIGN_CENTER);
+    gtk_label_set_label (GTK_LABEL (priv->firmware_upgrade_label), scheduled_label);
+
+    g_info ("rebooting to install firmware upgrade");
+    char *argv[1];
+    argv[0] = "reboot";
+    g_spawn_sync (NULL, argv, NULL, G_SPAWN_DEFAULT, NULL, NULL, NULL, NULL, NULL, NULL);
+  } else {
+    g_warning ("failed to schedule firmware upgrade");
+  }
+#endif
+
+  gtk_dialog_response(data->dialog, GTK_RESPONSE_CLOSE);
+  g_slice_free (FirmwareScheduleData, data);
+}
+
+static void
+s76_firmware_dialog (GtkButton *button,
+                      CcInfoOverviewPanel *self)
+{
+  CcInfoOverviewPanelPrivate *priv = cc_info_overview_panel_get_instance_private (self);
+
+  FirmwareUpdateDialog dialog = firmware_dialog_new (
+    priv->firmware_version->bios,
+    priv->firmware_version->changes
+  );
+
+  firmware_dialog_connect_reboot (&dialog, G_CALLBACK (s76_firmware_connect_schedule), priv);
+  firmware_dialog_run (&dialog);
+}
+
+static void
 cc_info_overview_panel_class_init (CcInfoOverviewPanelClass *klass)
 {
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
@@ -888,6 +965,14 @@ cc_info_overview_panel_class_init (CcInf
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, grid1);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, label18);

+  // Pop!_OS extra details
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, computer_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, model_label);
+
+  // Pop!_OS firmware listbox
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, firmware_upgrade_label);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, firmware_button);
+
   g_type_ensure (CC_TYPE_HOSTNAME_ENTRY);
 }

@@ -909,6 +994,24 @@ cc_info_overview_panel_init (CcInfoOverv

   info_overview_panel_setup_overview (self);
   info_overview_panel_setup_virt (self);
+
+  // Pop-specific details
+  GtkSizeGroup *button_group = gtk_size_group_new (GTK_SIZE_GROUP_HORIZONTAL);
+  gtk_size_group_add_widget (button_group, priv->firmware_button);
+
+  set_computer_label (GTK_LABEL (priv->computer_label));
+  set_model_label (GTK_LABEL (priv->model_label));
+
+  g_signal_connect (priv->firmware_button, "clicked", G_CALLBACK (s76_firmware_dialog), self);
+
+  s76_firmware_check (
+    priv->firmware_daemon,
+    priv->firmware_version,
+    GTK_BUTTON (priv->firmware_button),
+    GTK_LABEL (priv->firmware_upgrade_label),
+    priv->firmware_digest,
+    priv->firmware_changelog
+  );
 }

 GtkWidget *
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/dmi-info.c
@@ -0,0 +1,21 @@
+#include <dmi-info.h>
+#include <glib.h>
+
+static char *get_sys_info (gchar *path) {
+  g_autofree gchar *buffer = NULL;
+  return g_file_get_contents (path, &buffer, NULL, NULL)
+    ? g_strdup (g_strstrip (buffer))
+    : NULL;
+}
+
+char *get_product_name (void) {
+  return get_sys_info ("/sys/class/dmi/id/product_name");
+}
+
+char *get_product_version (void) {
+  return get_sys_info ("/sys/class/dmi/id/product_version");
+}
+
+char *get_sys_vendor (void) {
+  return get_sys_info ("/sys/class/dmi/id/sys_vendor");
+}
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/dmi-info.h
@@ -0,0 +1,3 @@
+char *get_product_name (void);
+char *get_product_version (void);
+char *get_sys_vendor (void);
--- gnome-control-center-3.30.2.orig/panels/info/info-overview.ui
+++ gnome-control-center-3.30.2/panels/info/info-overview.ui
@@ -69,6 +69,67 @@
                 <property name="left-attach">1</property>
               </packing>
             </child>
+            <!-- Computer details -->
+            <child>
+              <object class="GtkLabel">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="xalign">1</property>
+                <property name="label" translatable="yes">Computer</property>
+                <property name="mnemonic_widget">computer_label</property>
+                <style>
+                 <class name="dim-label"/>
+                </style>
+              </object>
+              <packing>
+                <property name="top-attach">1</property>
+                <property name="left-attach">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="computer_label">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="xalign">0</property>
+                <property name="label">Unknown</property>
+                <property name="selectable">True</property>
+              </object>
+              <packing>
+                <property name="top-attach">1</property>
+                <property name="left-attach">2</property>
+              </packing>
+            </child>
+            <!-- Model details -->
+            <child>
+              <object class="GtkLabel">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="xalign">1</property>
+                <property name="label" translatable="yes">Model</property>
+                <property name="mnemonic_widget">model_label</property>
+                <style>
+                 <class name="dim-label"/>
+                </style>
+              </object>
+              <packing>
+                <property name="top-attach">2</property>
+                <property name="left-attach">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="model_label">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="xalign">0</property>
+                <property name="label">Unknown</property>
+                <property name="selectable">True</property>
+              </object>
+              <packing>
+                <property name="top-attach">2</property>
+                <property name="left-attach">2</property>
+              </packing>
+            </child>
+            <!-- Memory Details -->
             <child>
               <object class="GtkLabel" id="label5">
                 <property name="visible">True</property>
@@ -81,7 +142,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">1</property>
+                <property name="top-attach">3</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -97,7 +158,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">2</property>
+                <property name="top-attach">4</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -112,7 +173,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">3</property>
+                <property name="top-attach">5</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -128,7 +189,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">4</property>
+                <property name="top-attach">6</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -144,7 +205,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">5</property>
+                <property name="top-attach">7</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -160,7 +221,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">6</property>
+                <property name="top-attach">8</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -176,7 +237,7 @@
                 </style>
               </object>
               <packing>
-                <property name="top-attach">7</property>
+                <property name="top-attach">9</property>
                 <property name="left-attach">1</property>
               </packing>
             </child>
@@ -200,7 +261,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">1</property>
+                <property name="top-attach">3</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -213,7 +274,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">2</property>
+                <property name="top-attach">4</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -226,7 +287,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">3</property>
+                <property name="top-attach">5</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -239,7 +300,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">4</property>
+                <property name="top-attach">6</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -252,7 +313,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">5</property>
+                <property name="top-attach">7</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -265,7 +326,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">6</property>
+                <property name="top-attach">8</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -278,7 +339,7 @@
                 <property name="selectable">True</property>
               </object>
               <packing>
-                <property name="top-attach">7</property>
+                <property name="top-attach">9</property>
                 <property name="left-attach">2</property>
               </packing>
             </child>
@@ -303,6 +364,98 @@
             <property name="position">2</property>
           </packing>
         </child>
+        <!-- Pop!_OS-specific UI widgets -->
+        <!-- Firmware Option -->
+        <child>
+          <object class="GtkLabel" id="firmware_upgrade">
+            <property name="halign">start</property>
+            <property name="use-markup">True</property>
+            <property name="visible">True</property>
+            <property name="margin-top">12</property>
+            <property name="label" translatable="yes">&lt;b&gt;Computer Firmware&lt;/b&gt;</property>
+          </object>
+          <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+            <property name="position">5</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkFrame" id="firmware_upgrade_frame">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label_xalign">0</property>
+            <property name="shadow_type">in</property>
+            <property name="margin_top">6</property>
+            <child>
+              <object class="GtkListBox" id="firmware_upgrade_listbox">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="selection_mode">none</property>
+                <!-- Firmware upgrade option -->
+                <child>
+                  <object class="GtkListBoxRow" id="firmware_upgrade_row">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <child>
+                      <object class="GtkBox" id="firmware_upgrade_box">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="spacing">50</property>
+                        <property name="margin_start">20</property>
+                        <property name="margin_end">20</property>
+                        <property name="margin_top">9</property>
+                        <property name="margin_bottom">9</property>
+                        <child>
+                          <object class="GtkLabel" id="firmware_upgrade_label">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="xalign">0</property>
+                            <property name="use_underline">True</property>
+                            <property name="mnemonic_widget">firmware_button</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkButton" id="firmware_button">
+                            <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="valign">center</property>
+                            <child>
+                              <object class="GtkLabel">
+                                <property name="use-markup">True</property>
+                                <property name="visible">True</property>
+                                <property name="label" translatable="yes">&lt;b&gt;Upgrade&lt;/b&gt;</property>
+                              </object>
+                            </child>
+                            <style>
+                              <class name="suggested-action"/>
+                            </style>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">6</property>
+          </packing>
+        </child>
+        <!-- End of Pop!_OS changes -->
         <child>
           <object class="GtkButtonBox" id="hbuttonbox1">
             <property name="visible">True</property>
--- gnome-control-center-3.30.2.orig/panels/info/meson.build
+++ gnome-control-center-3.30.2/panels/info/meson.build
@@ -41,7 +41,11 @@ sources = files(gsd_sources) + files(
   'cc-info-default-apps-panel.c',
   'cc-info-overview-panel.c',
   'cc-info-removable-media-panel.c',
-  'info-cleanup.c'
+  'dmi-info.c',
+  'info-cleanup.c',
+  's76-firmware.c',
+  's76-firmware-daemon.c',
+  's76-firmware-dialog.c',
 )

 resource_data = files(
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware-daemon.c
@@ -0,0 +1,202 @@
+#include <s76-firmware-daemon.h>
+#include <json-glib/json-glib.h>
+#include <json-glib/json-gobject.h>
+
+const int S76_FIRMWARE_NEEDS_UPDATE = 1;
+
+static const gchar *get_component (JsonReader *reader, char *member_name);
+static void component_set (gchar **target, const gchar *input);
+static void changelog_set (GPtrArray *array, const gchar *input);
+
+S76FirmwareDaemon s76_firmware_daemon_new (void) {
+  S76FirmwareDaemon daemon = { NULL };
+  return daemon;
+}
+
+int s76_firmware_daemon_connect (S76FirmwareDaemon *self) {
+  GError *error = NULL;
+
+  self->proxy = g_dbus_proxy_new_for_bus_sync (
+      G_BUS_TYPE_SYSTEM, G_DBUS_PROXY_FLAGS_NONE, NULL,
+      "com.system76.FirmwareDaemon", "/com/system76/FirmwareDaemon",
+      "com.system76.FirmwareDaemon", NULL, &error);
+
+  if (self->proxy == NULL) {
+    g_warning ("failed to reach S76Firmware: %s", error->message);
+    return -1;
+  }
+
+  return 0;
+}
+
+int s76_firmware_daemon_download (S76FirmwareDaemon  *self,
+                                  gchar             **digest,
+                                  gchar             **changelog)
+{
+  GError *error = NULL;
+  GVariant *retval = NULL;
+
+  retval = g_dbus_proxy_call_sync (self->proxy, "Download", NULL,
+                                   G_DBUS_CALL_FLAGS_NONE, -1, NULL, &error);
+
+  if (retval == NULL) {
+    g_warning ("failed to call Download on S76Firmware: %s\n", error->message);
+    return -1;
+  }
+
+  g_variant_get (retval, "(ss)", digest, changelog);
+
+  return 0;
+}
+
+int s76_firmware_daemon_bios (S76FirmwareDaemon *self,
+                              gchar            **model,
+                              gchar            **version)
+{
+  GError *error = NULL;
+  GVariant *retval = NULL;
+
+  retval = g_dbus_proxy_call_sync (self->proxy, "Bios", NULL,
+                                   G_DBUS_CALL_FLAGS_NONE, -1, NULL, &error);
+
+  if (retval == NULL) {
+    g_warning ("failed to call Bios on S76Firmware: %s\n", error->message);
+    return -1;
+  }
+
+  g_variant_get (retval, "(ss)", model, version);
+
+  return 0;
+}
+
+int s76_firmware_daemon_schedule (S76FirmwareDaemon *self, gchar *digest) {
+  GError *error = NULL;
+  GVariant *retval = NULL;
+
+  retval = g_dbus_proxy_call_sync (self->proxy, "Schedule",
+                                   g_variant_new ("s", digest),
+                                   G_DBUS_CALL_FLAGS_NONE, -1, NULL, &error);
+
+  if (retval == NULL) {
+    g_warning ("failed to call Schedule on S76Firmware: %s\n", error->message);
+    return -1;
+  }
+
+  return 0;
+}
+
+int s76_firmware_daemon_needs_update (S76FirmwareDaemon *self,
+                                      S76FirmwareVersion *sversion,
+                                      gchar **digest, gchar **changelog) {
+  g_autofree gchar *model, *version = NULL;
+  int valid = s76_firmware_daemon_bios (self, &model, &version) == 0 &&
+              s76_firmware_daemon_download (self, digest, changelog) == 0 &&
+              s76_firmware_version_from_changelog (sversion, *changelog, version) == 0;
+
+  if (!valid) {
+    return -1;
+  }
+
+  int result = 0;
+  if (!g_str_equal (version, sversion->bios)) {
+    result = S76_FIRMWARE_NEEDS_UPDATE;
+  }
+
+  return result;
+}
+
+S76FirmwareVersion s76_firmware_version_new (void) {
+  S76FirmwareVersion version = { NULL, NULL, NULL, NULL, g_ptr_array_new () };
+  return version;
+}
+
+int s76_firmware_version_from_changelog (S76FirmwareVersion *self,
+                                         gchar *changelog,
+                                         gchar *current_bios)
+{
+  // Construct the reader from the changelog data.
+  JsonParser *parser = json_parser_new ();
+  json_parser_load_from_data (parser, changelog, -1, NULL);
+  JsonReader *reader = json_reader_new (json_parser_get_root (parser));
+
+  // Fetch the array from the versions field.
+  json_reader_read_member (reader, "versions");
+  gboolean found_current = FALSE;
+
+  if (json_reader_is_array (reader)) {
+    guint nelements = json_reader_count_elements (reader);
+    for (guint index = 0; index < nelements; index = index + 1) {
+      json_reader_read_element (reader, index);
+
+      if (json_reader_is_object (reader)) {
+        const gchar *bios = get_component (reader, "bios");
+        component_set (&self->bios, bios);
+        found_current = g_str_equal (current_bios, bios);
+
+        component_set (&self->ec, get_component (reader, "ec"));
+        component_set (&self->ec2, get_component (reader, "ec2"));
+        component_set (&self->me, get_component (reader, "me"));
+
+        if (!found_current) {
+          changelog_set (self->changes, get_component (reader, "description"));
+        }
+      }
+
+      json_reader_end_element (reader);
+    }
+  }
+
+  g_object_unref (reader);
+  g_object_unref (parser);
+
+  return s76_firmware_version_verify (self);
+}
+
+void s76_firmware_version_free (S76FirmwareVersion *self) {
+  if (self != NULL) {
+    g_clear_pointer (&self->bios, g_free);
+    g_clear_pointer (&self->ec, g_free);
+    g_clear_pointer (&self->ec2, g_free);
+    g_clear_pointer (&self->me, g_free);
+    g_ptr_array_free (self->changes, TRUE);
+  }
+}
+
+int s76_firmware_version_verify (S76FirmwareVersion *self) {
+  if (!self->bios) {
+    g_warning ("firmware bios version is null");
+    return -1;
+  } else if (!self->ec) {
+    g_warning ("firmware ec version is null");
+    return -1;
+  } else if (!self->me) {
+    g_warning ("firmware me version is null");
+    return -1;
+  }
+
+  return 0;
+}
+
+static const gchar *get_component (JsonReader *reader, char *member_name) {
+  const gchar *value = NULL;
+  json_reader_read_member (reader, member_name);
+
+  if (json_reader_is_value (reader)) {
+    value = json_reader_get_string_value (reader);
+  }
+
+  json_reader_end_member (reader);
+  return value;
+}
+
+static void component_set (gchar **target, const gchar *input) {
+  if (input != NULL && *target == NULL) {
+    *target = g_strdup (input);
+  }
+}
+
+static void changelog_set (GPtrArray *array, const gchar *input) {
+  if (input != NULL) {
+    g_ptr_array_insert (array, -1, (gpointer) g_strdup (input));
+  }
+}
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware-daemon.h
@@ -0,0 +1,50 @@
+#include <gio/gio.h>
+#include <glib.h>
+#include <gmodule.h>
+
+extern const int S76_FIRMWARE_NEEDS_UPDATE;
+
+typedef struct {
+  gchar *bios;
+  gchar *ec;
+  gchar *ec2;
+  gchar *me;
+  GPtrArray *changes;
+} S76FirmwareVersion;
+
+S76FirmwareVersion s76_firmware_version_new (void);
+
+// Verify that all the fields were set.
+int s76_firmware_version_verify (S76FirmwareVersion *version);
+
+// Get the latest firmware information from the changelog.
+int s76_firmware_version_from_changelog(S76FirmwareVersion *self,
+                                        gchar *changelog, gchar *current_bios);
+
+// Free the gchar strings contained by the struct.
+void s76_firmware_version_free(S76FirmwareVersion *version);
+
+typedef struct {
+  GDBusProxy *proxy;
+} S76FirmwareDaemon;
+
+S76FirmwareDaemon s76_firmware_daemon_new (void);
+
+int s76_firmware_daemon_connect (S76FirmwareDaemon *daemon);
+
+int s76_firmware_daemon_download (S76FirmwareDaemon *daemon,
+                                  gchar       **digest,
+                                  gchar       **changelog);
+
+int s76_firmware_daemon_bios (S76FirmwareDaemon *daemon,
+                              gchar            **model,
+                              gchar            **version);
+
+int s76_firmware_daemon_schedule(S76FirmwareDaemon *self, gchar *digest);
+
+
+// Returns -1 on error, 0 on no update required, and 1 on an update
+// required.
+int s76_firmware_daemon_needs_update(S76FirmwareDaemon *daemon,
+                                     S76FirmwareVersion *sversion,
+                                     gchar **digest, gchar **changelog);
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware-dialog.c
@@ -0,0 +1,90 @@
+#include <s76-firmware-dialog.h>
+#include <glib.h>
+#include <glib/gi18n.h>
+
+static void cancel_dialog (GtkButton *button, GtkDialog *dialog);
+
+typedef struct {
+  GString *output;
+  gchar   *pattern;
+} FoldData;
+
+static void join_str_lambda (gchar *element, FoldData *data) {
+  g_string_append (data->output, data->pattern);
+  g_string_append (data->output, element);
+}
+
+static gchar *join_str (GPtrArray *array, gchar *pattern) {
+  GString *strbuf = g_string_new (NULL);
+  FoldData data = { strbuf, pattern };
+  g_ptr_array_foreach (array, join_str_lambda, &data);
+  return g_string_free (strbuf, FALSE);
+}
+
+FirmwareUpdateDialog firmware_dialog_new (gchar *version, GPtrArray *changes) {
+  GtkLabel *title = (GtkLabel*) gtk_label_new ("<b>Firmware Update</b>");
+  gtk_label_set_use_markup (title, TRUE);
+
+  g_autofree gchar *changelog = join_str (changes, "\t* ");
+
+  GtkLabel *text = (GtkLabel*) gtk_label_new (
+    g_strdup_printf (_("Firmware version %s is available. Fixes and features"
+      " include:\n\n%s\n\nIf you're on a laptop, <b>plug into power</b>"
+      " before you begin."), version, changelog)
+  );
+
+  gtk_label_set_line_wrap (text, TRUE);
+  gtk_label_set_use_markup (text, TRUE);
+  gtk_widget_set_valign (GTK_WIDGET (text), GTK_ALIGN_START);
+
+  GtkWidget *icon = gtk_image_new_from_icon_name ("application-x-cd-image", 6);
+  gtk_widget_set_valign (GTK_WIDGET (icon), GTK_ALIGN_START);
+
+  GtkDialog *dialog = (GtkDialog*) g_object_new (GTK_TYPE_DIALOG,
+                                    "use-header-bar", TRUE,
+                                    NULL);
+
+  GtkButton *cancel = GTK_BUTTON (gtk_button_new_with_label ("Cancel"));
+  g_signal_connect(cancel, "clicked", G_CALLBACK (cancel_dialog), dialog);
+
+  GtkButton *reboot = GTK_BUTTON (gtk_button_new_with_label ("Reboot and Install"));
+  gtk_style_context_add_class (
+    gtk_widget_get_style_context ((GtkWidget*) reboot),
+    GTK_STYLE_CLASS_DESTRUCTIVE_ACTION
+  );
+
+  GtkHeaderBar *header = GTK_HEADER_BAR (gtk_dialog_get_header_bar (dialog));
+  gtk_header_bar_set_custom_title (header, GTK_WIDGET (title));
+  gtk_header_bar_set_show_close_button (header, FALSE);
+  gtk_header_bar_pack_start (header, GTK_WIDGET (cancel));
+  gtk_header_bar_pack_end (header, GTK_WIDGET (reboot));
+
+  GtkContainer *box = GTK_CONTAINER (gtk_dialog_get_content_area (dialog));
+  gtk_orientable_set_orientation (GTK_ORIENTABLE (box), GTK_ORIENTATION_HORIZONTAL);
+  gtk_container_set_border_width (box, 12);
+  gtk_box_set_spacing (GTK_BOX (box), 6);
+  gtk_container_add (box, GTK_WIDGET (icon));
+  gtk_container_add (box, GTK_WIDGET (text));
+
+  g_signal_connect_swapped (dialog, "response", G_CALLBACK(gtk_widget_destroy), dialog);
+  gtk_widget_show_all (GTK_WIDGET (dialog));
+
+  FirmwareUpdateDialog firmware_dialog = { reboot, dialog };
+  return firmware_dialog;
+}
+
+void firmware_dialog_connect_reboot (FirmwareUpdateDialog *dialog, GCallback callback, gpointer data) {
+  FirmwareScheduleData *cbdata = g_slice_new0 (FirmwareScheduleData);
+  cbdata->dialog = dialog->dialog;
+  cbdata->data = data;
+
+  g_signal_connect (dialog->reboot, "clicked", callback, cbdata);
+}
+
+int firmware_dialog_run (FirmwareUpdateDialog *dialog) {
+  return gtk_dialog_run (dialog->dialog);
+}
+
+static void cancel_dialog (GtkButton *button, GtkDialog *dialog) {
+  gtk_dialog_response (dialog, GTK_RESPONSE_CANCEL);
+}
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware-dialog.h
@@ -0,0 +1,40 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2019 System76
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <glib.h>
+#include <glib-object.h>
+#include <gobject/gvaluecollector.h>
+#include <gtk/gtk.h>
+
+typedef struct {
+    GtkButton *reboot;
+    GtkDialog *dialog;
+} FirmwareUpdateDialog;
+
+typedef struct {
+  GtkDialog *dialog;
+  gpointer data;
+} FirmwareScheduleData;
+
+FirmwareUpdateDialog firmware_dialog_new(gchar *version, GPtrArray *changes);
+
+void firmware_dialog_connect_reboot(FirmwareUpdateDialog *dialog,
+                                    GCallback callback, gpointer data);
+
+int firmware_dialog_run(FirmwareUpdateDialog *dialog);
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware.c
@@ -0,0 +1,45 @@
+#include "s76-firmware.h"
+#include <glib/gi18n.h>
+
+void s76_firmware_check (
+  S76FirmwareDaemon  *firmware_daemon,
+  S76FirmwareVersion *firmware_version,
+  GtkButton          *firmware_button,
+  GtkLabel           *firmware_label,
+  gchar              *firmware_digest,
+  gchar              *firmware_changelog
+) {
+  gtk_widget_hide (firmware_button);
+  const gchar *label;
+
+  if (g_file_test ("/sys/firmware/efi", G_FILE_TEST_IS_DIR)) {
+    label = _("No Updates Available");
+
+    g_clear_pointer (&firmware_version, s76_firmware_version_free);
+    g_slice_free (S76FirmwareVersion, firmware_version);
+    g_slice_free (S76FirmwareDaemon, firmware_daemon);
+
+    firmware_daemon = g_slice_new0 (S76FirmwareDaemon);
+    firmware_version = g_slice_new0 (S76FirmwareVersion);
+    *firmware_version = s76_firmware_version_new ();
+
+    if (!s76_firmware_daemon_connect (firmware_daemon)) {
+      int needs_update = s76_firmware_daemon_needs_update (
+        firmware_daemon,
+        firmware_version,
+        &firmware_digest,
+        &firmware_changelog
+      );
+
+      if (needs_update == S76_FIRMWARE_NEEDS_UPDATE) {
+        g_info ("firmware update is available: %s", firmware_version->bios);
+        label = _("Firmware Updates Available");
+        gtk_widget_show (firmware_button);
+      }
+    }
+  } else {
+    label = _("Only Supported on EFI Installs");
+  }
+
+  gtk_label_set_label (firmware_label, label);
+}
--- /dev/null
+++ gnome-control-center-3.30.2/panels/info/s76-firmware.h
@@ -0,0 +1,11 @@
+#include "gtk/gtk.h"
+
+#include "s76-firmware-daemon.h"
+#include "s76-firmware-dialog.h"
+
+void s76_firmware_check(S76FirmwareDaemon *firmware_daemon,
+                        S76FirmwareVersion *firmware_version,
+                        GtkButton *firmware_button,
+                        GtkLabel *firmware_label,
+                        gchar *firmware_digest,
+                        gchar *firmware_changelog);
